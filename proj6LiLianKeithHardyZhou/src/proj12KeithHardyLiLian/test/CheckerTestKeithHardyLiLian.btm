class Main extends B{
    boolean a = true;
    int b = true;

    //use of undeclared type
    ood c = null;

    //the type D does not exist
    D[] l = new D[6];

    //variable defined twice as fields
    boolean b = false;

    B testB = new B();

    void bar(int a){
	//improper number of arguments for method call
    	testB.foo(true);

        a = a + 1;
    }

    //declared type of the formal parameter undefined
    void method1(type a){
	//cannot declare a variable as null
	var h = null;
	//reserved keyword as a variable
	var int = 3;
	var y = 3;
	//array has not been delared in this scope
	var m = y[1];
	//cannot use intanceof on a variable of primitive type
	//Class D does not exist
	var x = y instanceof D;
	var p = new B();
	//Class C is not a super class or subclass of classB
	cast(C,p);
	b = true;
	//Invalid var expression, primitives do not have fields
	y.foo = 5;
    }

    // method name duplication
    void bar(int y, int z) {
        //use of proper types of data for operations
        y = y + true;
	y = y / true;
	y = y - true;
	y = y * true;
	y = y % true;
	//the neg operator applies only to int expressions
	y = -true;
	//the not expression applies only to boolean expressions
	y = !1;
	//the incr operator applies only to int expressions
	y = true++;
	//the decr operator applies only to int expressions
	y = true--;
        //use of undefined variable
        stephanie = 1;
        var z = this.foo();
        z = z * y;
	//size of new array is not of type int
        var q = (new int[true]);
        for(i = 0; i < 2; i++){
            z = z + i;
            y = z + i;
        }
        while(z < 5 || x > 6){
           foo(z).get(x).ban().bar();
           this.counter ++;
           break;
        }
	//type of thr predicate is not boolean
	while(y){
	   break;
	}
	//type of Init is not int
	//type of predicate is not boolean
	//type of update is not int
	for(a = true; a = 3; b){
	   a = false;
	}
        if(x == 3){
            z = z / 2;
        }else{
            y = y / 2;
        }
    }
    //method overloading
    int foo(){
        foo(d).fooo(x);
        return 6;
    }

    int dale(){
	//wrong type of return statement
        return true;
    }
}

class B{
    int[] a;
    int b;
    void B(){
	a = new int[3];
	//Index of array is not of type int
	a[t] = 0;
	c = new int[1+5*c+6];
	(new A()).bar(car(a,cars(c),d,12),b);
	(new A()).bar(car(a,cars(c)),b);
    }

    int[] foo(){
    	a[3]=4;
    	return a;
    }

    int bruce(boolean boo){
        return 3;
    }
    void main() {
	//argument types do not match parameter type
	bruce(3);
	a[3] = 5;
        x = a[3];
	foo();
        foo(x,y);
        var y = a.b().length;
        var z = new ban();
        cast(int,a+b.foo().get().bar(ab));
	//wrong type of return value
        return 6;
    }
}

//circular inheritance
class A extends C{
    void main(){

    }
}

class C extends A{
    void main(){

    }
}